version: '3.8'

services:
  devops-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: devops-agent
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
      # Cloud provider credentials (set these via .env file)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-west-2}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS:-}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET:-}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID:-}
    volumes:
      # Mount Docker socket for Docker-in-Docker operations
      - /var/run/docker.sock:/var/run/docker.sock
      # Persistent storage for logs and learning data
      - ./logs:/app/logs
      - ./data:/app/data
      - ./temp:/app/temp
      # Mount cloud credentials
      - ~/.aws:/home/devopsagent/.aws:ro
      - ~/.config/gcloud:/home/devopsagent/.config/gcloud:ro
      - ~/.azure:/home/devopsagent/.azure:ro
    ports:
      - "8080:8080"
    networks:
      - devops-network
    command: ["python", "run.py"]
    depends_on:
      - redis
      - prometheus
    
  # Redis for caching and state management
  redis:
    image: redis:7-alpine
    container_name: devops-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - devops-network
    command: redis-server --appendonly yes

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: devops-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - devops-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: devops-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    networks:
      - devops-network

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: devops-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=devops_agent
      - POSTGRES_USER=devopsagent
      - POSTGRES_PASSWORD=devopsagent123
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - devops-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  postgres-data:

networks:
  devops-network:
    driver: bridge
